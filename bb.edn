;; Deployment build file
;; Note: generated build products are built using git describe
;; This uses the last *annotated* tag - ie a tag with a commit message. 
{:tasks
 {:requires  ([babashka.fs :as fs]
              [babashka.process :refer [sh]]
              [clojure.string :as str])

  :init      (do
               (def version (str "pc4-" (str/trim (:out (sh "git describe")))))
               (def uber-filename (str version ".jar")))

  view-deps  {:doc  "View dependencies"
              :task (shell "clj -X:deps tree")}

  css        {:doc  "Build CSS for production"
              :task (do (println "***** Building CSS")
                        (shell "yarn tailwindcss -o resources/public/css/output.css --minify"))}

  watch-css  {:doc  "Build CSS for development [and watch]"
              :task (do (println "***** Watching and building CSS on demand")
                        (shell "yarn tailwindcss -o resources/public/css/output.css --watch"))}

  watch-cljs {:doc  "Compile cljs for development [and watch]"
              :task (do (println "Running shadow-cljs")
                        (shell "yarn shadow-cljs -A:dev watch main"))}
  nrepl      {:doc  "Run a nREPL with cider middleware "
              :task (do (println "Running nREPL with cider middleware")
                        (shell "clj -M:dev:test:portal:nrepl"))}

  serve      {:doc  "Run a development server. Note: it is usually to directly run from a REPL."
              :task (do (println "Running development server")
                        (shell "clj -X:run :profile :dev"))}

  cljs       {:doc  "Compile cljs for production"
              :task (do (println "***** Building pc4 front-end for production release")
                        (shell "yarn shadow-cljs release main"))}

  uber       {:doc  "Create an uberjar for production"
              :task (do
                      (println "***** Creating uberjar" uber-filename)
                      (shell "clj" "-T:build" "uber" ":out" uber-filename))}

  upload     {:doc  "Upload production artefact"
              :task (do
                      (println "***** Uploading to production server - https://patientcare.app")
                      (sh "scp -i " (str (fs/home) "/.aws/LightsailDefaultKey-eu-west-2.pem") uber-filename "ec2-user@patientcare.app:"))}

  pc4        {:doc  "Build and upload production artefact"
              :task (do
                      (println "********** Building for production")
                      (run 'uber)
                      (run 'upload))}}}



